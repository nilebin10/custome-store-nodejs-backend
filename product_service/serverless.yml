# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
          - "dynamodb:DescribeTable"
          - "dynamodb:Query"
          - "dynamodb:Scan"
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:DeleteItem"
          Resource:
          - "arn:aws:dynamodb:us-east-1:${env:ACCOUNT}:table/${env:PRODUCTS_TABLE_NAME}"
        - Effect: "Allow"
          Action:
          - "dynamodb:DescribeTable"
          - "dynamodb:Query"
          - "dynamodb:Scan"
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:DeleteItem"
          Resource:
          - "arn:aws:dynamodb:us-east-1:${env:ACCOUNT}:table/${env:STOCKS_TABLE_NAME}"
        - Effect: "Allow"
          Action:
          - "sqs:SendMessage"
          - "sqs:GetMessage"
          Resource:
          - "arn:aws:dynamodb:us-east-1:${env:ACCOUNT}:${env:SQS_QUEUE}"
        - Effect: "Allow"
          Action:
          - "sns:Publish"
          Resource:
          - "arn:aws:dynamodb:us-east-1:${env:ACCOUNT}:${env:SNS_TOPIC_NAME}"


plugins:
  - serverless-offline
  - serverless-webpack
# you can overwrite defaults here

# you can add packaging information here
custom:
  webpack:
    webpackConfig: './webpack.config.js'
    includeModules: true
  environments:
    PRODUCTS_TABLE_NAME: ${env:PRODUCTS_TABLE_NAME}
    STOCKS_TABLE_NAME: ${env:STOCKS_TABLE_NAME}
    SQS_NAME: ${env:SQS_QUEUE}
    SNS_TOPIC_NAME: ${env:SNS_TOPIC_NAME}
    EMAIL_ONE: ${env:EMAIL_ONE}
    EMAIL_TWO: ${env:EMAIL_TWO}
 
package:
 patterns:
#    - '!exclude-me.js'
   - '!node_modules/**'
   - '!*/**/*.test.ts'
#    - include-me.js
#    - include-me-dir/**

functions:
  getProducts:
    handler: handler.getProducts
    events:
     - http:
         path: /products
         method: get
    environment:
      PRODUCTS_TABLE_NAME: ${self:custom.environments.PRODUCTS_TABLE_NAME}
      STOCKS_TABLE_NAME: ${self:custom.environments.STOCKS_TABLE_NAME}
  getProductById:
    handler: handler.getProductById
    events:
     - http:
         path: /products/{productid}
         method: get
    environment:
     PRODUCTS_TABLE_NAME: ${self:custom.environments.PRODUCTS_TABLE_NAME}
     STOCKS_TABLE_NAME: ${self:custom.environments.STOCKS_TABLE_NAME}
  createProduct:
    handler: handler.createProduct
    events:
     - http:
         path: /product
         method: post
         cors: true
    environment:
     PRODUCTS_TABLE_NAME: ${self:custom.environments.PRODUCTS_TABLE_NAME}
     STOCKS_TABLE_NAME: ${self:custom.environments.STOCKS_TABLE_NAME}
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
     - sqs:
        arn:
          Fn::GetAtt:
            - ProductSQSQueue
            - Arn
        batchSize: 5
    environment:
      PRODUCTS_TABLE_NAME: ${self:custom.environments.PRODUCTS_TABLE_NAME}
      STOCKS_TABLE_NAME: ${self:custom.environments.STOCKS_TABLE_NAME}
      SNS_TOPIC_ARN:
        Fn::GetAtt:
          - ProductSNSTopic
          - TopicName

resources:
  Resources:
    ProductSQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.environments.SQS_NAME}
    ProductSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "Create Product Subscription"
        TopicName: createProductTopic
        Subscription:
          - Endpoint: ${self:custom.environments.EMAIL_ONE}
            Protocol: email
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: 
          Fn::GetAtt: 
            - ProductSNSTopic
            - TopicArn
        Endpoint: ${self:custom.environments.EMAIL_TWO}
        Protocol: email
        FilterPolicy:
          count: [{"numeric": ["<=", 5]}]





# resources: # CloudFormation template syntax from here on.
#   Resources:
#     ProductTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: ${self:custom.environments.PRODUCTS_TABLE_NAME}
#         AttributeDefinitions:
#           - AttributeName: id
#             AttributeType: S
#           - AttributeName: title
#             AttributeType: S
#         KeySchema:
#           - AttributeName: id
#             KeyType: HASH
#           - AttributeName: title
#             KeyType: RANGE
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#     StockTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: ${self:custom.environments.STOCKS_TABLE_NAME}
#         AttributeDefinitions:
#           - AttributeName: product_id
#             AttributeType: S
#           - AttributeName: count
#             AttributeType: N
#         KeySchema:
#           - AttributeName: product_id
#             KeyType: HASH
#           - AttributeName: count
#             KeyType: RANGE
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1